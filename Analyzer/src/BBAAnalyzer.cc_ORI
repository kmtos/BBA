// -*- C++ -*-
//
// Package:    BBAAnalyzer
// Class:      BBAAnalyzer
// 
/**\class BBAAnalyzer BBAAnalyzer.cc Analyzer/src/BBAAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Kyle Martin Tos
//         Created:  Thu Feb 26 09:51:23 CET 2015
// $Id$
//
//


// system include files
#include <memory>
#include <string>
#include <sstream>

// user include files
#include "CommonTools/UtilAlgos/interface/TFileService.h"

#include "DataFormats/HepMCCandidate/interface/GenParticleFwd.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/Math/interface/deltaR.h"
#include "DataFormats/MuonReco/interface/MuonFwd.h"
#include "DataFormats/MuonReco/interface/Muon.h"
#include "DataFormats/HLTReco/interface/TriggerObject.h"
#include "DataFormats/Common/interface/TriggerResults.h"
#include "DataFormats/HLTReco/interface/TriggerEvent.h"
#include "DataFormats/JetReco/interface/GenJet.h"

#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Common/interface/TriggerNames.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"

#include "HLTrigger/HLTanalyzers/interface/HLTInfo.h"
#include "HLTrigger/HLTcore/interface/HLTConfigProvider.h"
#include "HLTrigger/HLTcore/interface/HLTConfigData.h"

#include "SimDataFormats/PileupSummaryInfo/interface/PileupSummaryInfo.h"
#include "BBA/VariousFunctions/interface/VariousFunctions.h"

#include "TFile.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TCanvas.h"
#include "TLegend.h"


using namespace std;
using namespace edm;
using namespace reco;
using namespace trigger;
//
//
//
// class declaration
//

class BBAAnalyzer : public edm::EDAnalyzer {
   public:
      explicit BBAAnalyzer(const edm::ParameterSet&);
      ~BBAAnalyzer();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);


   private:
      virtual void beginJob() ;
      virtual void analyze(const edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;

      virtual void beginRun(edm::Run const&, edm::EventSetup const&);
      virtual void endRun(edm::Run const&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&);

      //delete memory
      void reset(const bool);
    
      // ----------member data ---------------------------
      //pointer to output file object
      TFile* out_;

      //name of output file
      std::string outFileName_;

      //gen particle tag
      edm::InputTag genParticleTag_;

      //gen jet tag
      edm::InputTag genJetTag_;

      //Histiograms
      TH1F* NJets_;
      TH1F* BPtCut_;
      TH1F* TauDecayLabeled_;
      TH1F* TauNDaughters_;
      TH1F* TauPtPho_;
      TH1F* TauPtPi_;
      TH1F* TauEtaPi_;
      TH1F* TauEtaPho_;

      TH1F* APt_;
      TH1F* AEta_;
      TH1F* DiTauDR_; 
      TH1F* BEta_;
      TH1F* ABDR_;

      TH2F* DiTauDRVsAPt_;
      TH2F* DiTauDRVsAEta_;
      TH2F* DiTauDRVsBPtLow_;
      TH2F* DiTauDRVsBPtHigh_;
      TH2F* ABDRVsAPt_;
      TH2F* ABDRVsDiTauDR_;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
BBAAnalyzer::BBAAnalyzer(const edm::ParameterSet& iConfig):
  outFileName_(iConfig.getParameter<std::string>("outFileName")),
  genParticleTag_(iConfig.getParameter<edm::InputTag>("genParticleTag")),
  genJetTag_(iConfig.getParameter<edm::InputTag>("genJetTag"))
{
  reset(false);    
}//BBAAnalyzer



BBAAnalyzer::~BBAAnalyzer()
{
  reset(true);
}


//
// member functions
//

// ------------ method called for each event  ------------
void BBAAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  //Get gen particle collection
  edm::Handle<reco::GenParticleCollection> pGenParticles;
  iEvent.getByLabel(genParticleTag_, pGenParticles);
  std::cout << "\n\nTHIS IS A NEW EVENT" << std::endl;

  //Get gen jet collection
  edm::Handle<reco::GenJetCollection> pGenJets;
  iEvent.getByLabel(genJetTag_, pGenJets);
  
  //Cycling through all of the particles in each event
  for (reco::GenParticleCollection::const_iterator iGenParticle = pGenParticles->begin(); iGenParticle != pGenParticles->end(); ++iGenParticle)
  {

//
//This Next bit is the Tau Analysis Part
//
    reco::LeafCandidate::LorentzVector tau1P4Pho, tau2P4Pho, tau1P4Pi, tau2P4Pi, aP4;
    if(iGenParticle->pdgId() == 36 && iGenParticle->numberOfDaughters() == 2 && fabs(iGenParticle->daughter(0)->pdgId()) == 15) //Finds an A that decays to two taus
    {
      reco::GenParticleRef tau1Ref = iGenParticle->daughterRef(0);
      reco::GenParticleRef tau2Ref = iGenParticle->daughterRef(1);

      //This makes sure that the intermediate (not final state) taus are not used
      while(VariousFunctions::findIfInDaughters(tau1Ref, 15, true) || VariousFunctions::findIfInDaughters(tau2Ref, 15, true))
      {
        if(VariousFunctions::findIfInDaughters(tau1Ref, 15, true))
  	  tau1Ref = VariousFunctions::findDaughterInDaughters(tau1Ref, 15, true);
        if(VariousFunctions::findIfInDaughters(tau2Ref, 15, true))
          tau2Ref = VariousFunctions::findDaughterInDaughters(tau2Ref, 15, true);
      }//while

      //Below I calculate the various tau quantities
      int tau1DecayMode = VariousFunctions::tauDecayMode(tau1Ref), tau2DecayMode = VariousFunctions::tauDecayMode(tau2Ref);
      if(tau1DecayMode != 5)
      {
        tau1P4Pi = VariousFunctions::sumTauP4(tau1Ref, tau1DecayMode, false);
        tau1P4Pho = VariousFunctions::sumTauP4(tau1Ref, tau1DecayMode, true);       
        TauNDaughters_->Fill(tau1Ref->numberOfDaughters());
        TauDecayLabeled_->Fill(tau1DecayMode-1);
        TauPtPho_->Fill(tau1P4Pho.Pt() );
        TauPtPi_->Fill(tau1P4Pi.Pt() );
        TauEtaPi_->Fill(tau1P4Pi.Eta() );
        TauEtaPho_->Fill(tau1P4Pho.Eta() );
      }//if tau1DecayMode
      else
      {
	TauDecayLabeled_->Fill(tau1DecayMode-1);
      }
      if(tau2DecayMode != 5)
      {
  	tau2P4Pi = VariousFunctions::sumTauP4(tau2Ref, tau2DecayMode, false);
        tau2P4Pho = VariousFunctions::sumTauP4(tau2Ref, tau2DecayMode, true);
        TauNDaughters_->Fill(tau2Ref->numberOfDaughters());
        TauDecayLabeled_->Fill(tau2DecayMode-1); 
        TauPtPho_->Fill(tau2P4Pho.Pt());
        TauPtPi_->Fill(tau2P4Pi.Pt());
	TauEtaPi_->Fill(tau2P4Pi.Eta() );
	TauEtaPho_->Fill(tau2P4Pho.Eta() );
      }//if tau2DecayMode   
      else
      {
        TauDecayLabeled_->Fill(tau2DecayMode-1);
      }//else

      //Analysis of the A and b
      reco::LeafCandidate::LorentzVector aP4 = VariousFunctions::sumTauP4(tau1Ref, tau1DecayMode, true) + VariousFunctions::sumTauP4(tau2Ref, tau2DecayMode, true), bP4, bbarP4;
      double diTauDR = VariousFunctions::getDiTauDR(tau1Ref, tau2Ref, true), aBDR = 0, aBbarDR = 0;
      reco::GenParticleRef bbarRef, bRef, mother = iGenParticle->motherRef();
      while(!VariousFunctions::findIfInDaughters(mother, 5, true))
      {
        mother = mother->motherRef();
        if(VariousFunctions::findIfInDaughters(mother, 5, true))
        {
	  bbarRef = VariousFunctions::findDaughterInDaughters(mother, -5, false);
          bRef = VariousFunctions::findDaughterInDaughters(mother, 5, false); 
	  while(VariousFunctions::findIfInDaughters(bbarRef, 5, true) || VariousFunctions::findIfInDaughters(bRef, 5, true))
	  {
            if(VariousFunctions::findIfInDaughters(bbarRef, -5, false ))
              bbarRef = VariousFunctions::findDaughterInDaughters(bbarRef, -5, false);
            if(VariousFunctions::findIfInDaughters(bRef, 5, false))
              bRef = VariousFunctions::findDaughterInDaughters(bRef, 5, false);
	  }//while
	}//if 5 in mother
      }//while  pdgId == 36

      bP4 = bRef->p4();
      bbarP4 = bbarRef->p4();

      if(bRef->pt() > 100)
        BPtCut_->Fill(4);
      if(bRef->pt() > 80)
        BPtCut_->Fill(3);
      if(bRef->pt() > 60)
	BPtCut_->Fill(2);
      if(bRef->pt() > 40)
	BPtCut_->Fill(1);
      if(bRef->pt() > 0)
	BPtCut_->Fill(0);

      if(bbarRef->pt() > 100)
        BPtCut_->Fill(4);
      if(bbarRef->pt() > 80)
        BPtCut_->Fill(3);
      if(bbarRef->pt() > 60)
        BPtCut_->Fill(2);
      if(bbarRef->pt() > 40)
        BPtCut_->Fill(1);
      if(bbarRef->pt() > 0)
        BPtCut_->Fill(0);

      if(tau2DecayMode != 5 && tau1DecayMode != 5)
      {
	aBDR = VariousFunctions::getABDR(bRef, tau1Ref, tau2Ref, true);
 	aBbarDR = VariousFunctions::getABDR(bbarRef, tau1Ref, tau2Ref, true);
	aP4 = tau1P4Pho +tau2P4Pho;
	APt_->Fill(aP4.Pt() );
        AEta_->Fill(aP4.Eta() );
        DiTauDR_->Fill(diTauDR);
	BEta_->Fill(bP4.Eta() );
 	BEta_->Fill(bbarP4.Eta() );
	ABDR_->Fill(aBDR);
	ABDR_->Fill(aBbarDR);
	DiTauDRVsAPt_->Fill(diTauDR, aP4.Pt());
        DiTauDRVsAEta_->Fill(diTauDR, aP4.Eta() );
	if(bP4.Pt() > bbarP4.Pt())
	{
	  DiTauDRVsBPtLow_->Fill(diTauDR, bbarP4.Pt() );
	  DiTauDRVsBPtHigh_->Fill(diTauDR, bP4.Pt() );
	}//if bP4.Pt() > bbarP4.Pt()
	else
	{
          DiTauDRVsBPtLow_->Fill(diTauDR, bP4.Pt() );
          DiTauDRVsBPtHigh_->Fill(diTauDR, bbarP4.Pt() );
	}//else
	ABDRVsAPt_->Fill(aBDR, aP4.Pt());
	ABDRVsAPt_->Fill(aBbarDR, aP4.Pt());
	ABDRVsDiTauDR_->Fill(aBDR, diTauDR);
      }//if no 5-tauDecayMode

    }//if ID = 36 && 2 daughters and daughter pdg id  == 15

  }//for iGenDaughters

  double nJets = 0;
  for(reco::GenJetCollection::const_iterator iGenJet = pGenJets->begin(); iGenJet != pGenJets->end(); ++iGenJet)
  {
    nJets++;

    std::cout << "\tJet #" << nJets << " has emEnergy= " << iGenJet->emEnergy() << " and has hadEnergy= " << iGenJet->hadEnergy() << " has pt= " << iGenJet->pt() << " has eta= " << iGenJet->eta() ;
    std::cout << " has phi= " << iGenJet->phi() << std::endl;
  }//for iGenJets
  std::cout << "\tnJets= " << nJets << std::endl;

  NJets_->Fill(nJets);

}//End BBAAnalyzer::analyze


// ------------ method called once each job just before starting event loop  ------------
void BBAAnalyzer::beginJob()
{
  //Open output file
  out_ = new TFile(outFileName_.c_str(), "RECREATE");

  //Book histograms
  NJets_ = new TH1F("NJets", "", 7, 0, 7);
  BPtCut_ = new TH1F("BPtCut", "", 5, -.5, 4.5);
  TauDecayLabeled_ = new TH1F("TauDecayLabeled", "", 7, 0, 7);
  TauNDaughters_ = new TH1F("TauNDaughters", "", 8, -.5, 7.5);
  TauPtPho_ = new TH1F("TauPtPho", "", 50, 0, 50);
  TauPtPi_ = new TH1F("TauPtPi", "", 50, 0, 50);
  TauEtaPi_ = new TH1F("TauEtaPi", "", 50, -10, 10);
  TauEtaPho_ = new TH1F("TauEtaPho", "", 50, -10, 10);

  APt_ = new TH1F("AOt", "", 100, 0, 100);
  AEta_ = new TH1F("AEta", "", 50, -6, 6);
  DiTauDR_ = new TH1F("DiTauDR", "", 50, 0, 20);
  BEta_ = new TH1F("BEta", "", 50, -7, 7);
  ABDR_ = new TH1F("ABDR", "", 101, -1, 20);

  DiTauDRVsAPt_ = new TH2F("DiTauDRVsAPt", "", 50, 0.0, 10.0, 50, 0.0, 80.0);
  DiTauDRVsAEta_ = new TH2F("DiTauDRVsAEta", "", 50, 0.0, 10.0, 50, -8.0, 8.0);
  DiTauDRVsBPtLow_ = new TH2F("DiTauDRVsBPtLow", "", 50, 0.0, 10.0, 100, 0, 100.0);
  DiTauDRVsBPtHigh_ = new TH2F("DiTauDRVsBPtHigh", "", 50, 0.0, 10.0, 100, 0, 100.0);
  ABDRVsAPt_ = new TH2F("ABDRVsAPt", "", 50, -1.0, 15.0, 50, 0.0, 30.0);
  ABDRVsDiTauDR_ = new TH2F("ABDRVsDiTauDr", "", 50, -1.0, 15.0, 50, 0.0, 6.0);
  
  //Set Bin Labeles
  TauDecayLabeled_->GetXaxis()->SetBinLabel(1, "1-prong");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(2, "1-prong + 1 #pi^{0}");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(3, "1-prong + 2 #pi^{0}");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(4, "3-prong");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(5, "other");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(6, "Electron");
  TauDecayLabeled_->GetXaxis()->SetBinLabel(7, "Muon");


  BPtCut_->GetXaxis()->SetBinLabel(1, "Total");
  BPtCut_->GetXaxis()->SetBinLabel(2, ">40");
  BPtCut_->GetXaxis()->SetBinLabel(3, ">60");
  BPtCut_->GetXaxis()->SetBinLabel(4, ">80");
  BPtCut_->GetXaxis()->SetBinLabel(5, ">100");

}

// ------------ method called once each job just after ending the event loop  ------------
void BBAAnalyzer::endJob()
{
  for(int i=0; i<6; i++)
    cout << "BIN #" << i << " has a count of " << BPtCut_->GetBinContent(i) << std::endl;


  //Make the Canvases
  TCanvas NJetsCanvas("NJets", "", 600, 600);
  TCanvas BPtCutCanvas("BPtCut", "", 600, 600);
  TCanvas TauDecayLabeledCanvas("TauDecayLabeled", "", 600, 600);
  TCanvas TauNDaughtersCanvas("TauNDaughters","",600,600);
  TCanvas TauPtPhoCanvas("TauPtPho","",600,600);
  TCanvas TauPtPiCanvas("TauPtPi","",600,600);
  TCanvas TauEtaPiCanvas("TauEtaPi","",600,600);
  TCanvas TauEtaPhoCanvas("TauEtaPho","",600,600);

  TCanvas APtCanvas("APt","",600,600);
  TCanvas AEtaCanvas("AEta","",600,600);
  TCanvas DiTauDRCanvas("DiTauDR","",600,600);
  TCanvas BEtaCanvas("BEta","",600,600);
  TCanvas ABDRCanvas("ABDR","",600,600);

  TCanvas DiTauDRVsAPtCanvas("DiTauDRVsAPt","" ,600,600);
  TCanvas DiTauDRVsAEtaCanvas("DiTauDRVsAEta","" ,600,600);
  TCanvas DiTauDRVsBPtLowCanvas("DiTauDRVsBPtLow","" ,600,600);
  TCanvas DiTauDRVsBPtHighCanvas("DiTauDRVsBPtHigh","" ,600,600);
  TCanvas ABDRVsAPtCanvas("ABDRVsAPt","",600,600);
  TCanvas ABDRVsDiTauDRCanvas("ABDRVsDiTauDR","",600,600);

  //Format the 1D plots and Draw (canvas, hist, grid, log y, log z, color, size, style, xAxisTitle, xTitleSize, xLabelSize, xTitleOffSet, yAxisTitle, yTitleSize, yLabelSize, yTitleOffset)
  VariousFunctions::formatAndDrawCanvasAndHist1D(NJetsCanvas, NJets_, 1, 0, 0, kBlack, 0.7, 20, "nJets per Event", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(BPtCutCanvas, BPtCut_, 1, 0, 0, kBlack, 0.7, 20, "", .04, .04, 1, "", .04, .04, 1, false); 
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauDecayLabeledCanvas, TauDecayLabeled_, 1, 0, 0, kBlack, 0.7, 20, "#tau Decays", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauNDaughtersCanvas, TauNDaughters_, 1, 0, 0, kBlack, 0.7, 20, "N #tau Daughters", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauPtPhoCanvas, TauPtPho_, 1, 0, 0, kBlack, 0.7, 20, "Visible Pt_{#tau}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauPtPiCanvas, TauPtPi_, 1, 0, 0, kBlack, 0.7, 20, "Visible Pt_{#tau}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauEtaPiCanvas, TauEtaPi_, 1, 0, 0, kBlack, 0.7, 20, "Visible #eta_{#tau}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(TauEtaPhoCanvas, TauEtaPho_, 1, 0, 0, kBlack, 0.7, 20, "Visible #eta_{#tau}", .04, .04, 1, "", .04, .04, 1, false);

  VariousFunctions::formatAndDrawCanvasAndHist1D(APtCanvas, APt_, 1, 0, 0, kBlack, 0.7, 20, "Pt_{A}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(AEtaCanvas,AEta_, 1, 0, 0, kBlack, 0.7, 20, "#eta_{A}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(DiTauDRCanvas, DiTauDR_, 1, 0, 0, kBlack, 0.7, 20, "dR_{#tau #tau}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(BEtaCanvas, BEta_, 1, 0, 0, kBlack, 0.7, 20, "#eta_{b}", .04, .04, 1, "", .04, .04, 1, false);
  VariousFunctions::formatAndDrawCanvasAndHist1D(ABDRCanvas, ABDR_, 1, 0, 0, kBlack, 0.7, 20, "dR_{ab}", .04, .04, 1, "", .04, .04, 1, false);

  //Format the 2D plots and Draw (canvas, hist, grid, log y, log z, color, size, style, xAxisTitle, xTitleSize, xLabelSize, xTitleOffSet, yAxisTitle, yTitleSize, yLabelSize, yTitleOffset,
  			      // zAxisTitle, zTitleSize, zLabelSize, zTitleOffset)
  VariousFunctions::formatAndDrawCanvasAndHist2D(DiTauDRVsAPtCanvas, DiTauDRVsAPt_, 0, 0, 0, kBlack, 7, 20, "dR_{#tau#tau}", .04, .04, 1.1, "Pt_{A}", .04, .04, 1.6, "", .04, .04, 1.0);
  VariousFunctions::formatAndDrawCanvasAndHist2D(DiTauDRVsAEtaCanvas, DiTauDRVsAEta_, 0, 0, 0, kBlack, 7, 20, "dR_{#tau#tau}", .04, .04, 1.1, "#eta_{A}", .04, .04, 1.6, "", .04, .04, 1.0);
  VariousFunctions::formatAndDrawCanvasAndHist2D(DiTauDRVsBPtLowCanvas, DiTauDRVsBPtLow_, 0, 0, 0, kBlack, 7, 20, "dR_{#tau#tau}", .04, .04, 1.1, "Pt_{bLow}", .04, .04, 1.6, "", .04, .04, 1.0);
  VariousFunctions::formatAndDrawCanvasAndHist2D(DiTauDRVsBPtHighCanvas, DiTauDRVsBPtHigh_, 0, 0, 0, kBlack, 7, 20, "dR_{#tau#tau}", .04, .04, 1.1, "Pt_{bHigh}", .04, .04, 1.6, "", .04, .04, 1.0);
  VariousFunctions::formatAndDrawCanvasAndHist2D(ABDRVsAPtCanvas, ABDRVsAPt_, 0, 0, 0, kBlack, 7, 20, "dR_{ab}", .04, .04, 1.1, "Pt_{A}", .04, .04, 1.6, "", .04, .04, 1.0);
  VariousFunctions::formatAndDrawCanvasAndHist2D(ABDRVsDiTauDRCanvas, ABDRVsDiTauDR_, 0, 0, 0, kBlack, 7, 20, "dR_{ab}", .04, .04, 1.1, "dR_{#tau#tau}", .04, .04, 1.6, "", .04, .04, 1.0);

  //Write output file
  out_->cd();
  NJetsCanvas.Write();
  BPtCutCanvas.Write();
  TauDecayLabeledCanvas.Write();
  TauNDaughtersCanvas.Write();
  TauPtPhoCanvas.Write();
  TauPtPiCanvas.Write();
  TauEtaPiCanvas.Write();
  TauEtaPhoCanvas.Write();

  APtCanvas.Write();
  AEtaCanvas.Write();
  DiTauDRCanvas.Write();
  BEtaCanvas.Write();
  ABDRCanvas.Write();

  DiTauDRVsAPtCanvas.Write();
  DiTauDRVsAEtaCanvas.Write();
  DiTauDRVsBPtLowCanvas.Write();
  DiTauDRVsBPtHighCanvas.Write();
  ABDRVsAPtCanvas.Write();
  ABDRVsDiTauDRCanvas.Write();
  out_->Write();
  out_->Close();
std::cout << "DONE" << std::endl;
}//EndJob

// ------------ method called when starting to processes a run  ------------
void BBAAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&) {}

// ------------ method called when ending the processing of a run  ------------
void BBAAnalyzer::endRun(edm::Run const&, edm::EventSetup const&) {}

// ------------ method called when starting to processes a luminosity block  ------------
void BBAAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) {}

// ------------ method called when ending the processing of a luminosity block  ------------
void BBAAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) {}

//Delete Memory
void BBAAnalyzer::reset(const bool doDelete)
{
  if ((doDelete) && (out_ != NULL)) delete out_;
  out_ = NULL;
  if ((doDelete) && (TauDecayLabeled_ != NULL)) delete TauDecayLabeled_;
  TauDecayLabeled_ = NULL;
  if ((doDelete) && (NJets_ != NULL)) delete NJets_;
  NJets_ = NULL;
  if ((doDelete) && (BPtCut_ != NULL)) delete BPtCut_;
  BPtCut_ = NULL;
  if ((doDelete) && (TauNDaughters_ != NULL)) delete TauNDaughters_;
  TauNDaughters_ = NULL;
  if ((doDelete) && (TauPtPho_ != NULL)) delete TauPtPho_;
  TauPtPho_ = NULL;
  if ((doDelete) && (TauPtPi_ != NULL)) delete TauPtPi_;
  TauPtPi_ = NULL;  
  if ((doDelete) && (TauEtaPi_ != NULL)) delete TauEtaPi_;
  TauEtaPi_ = NULL; 
  if ((doDelete) && (TauEtaPho_ != NULL)) delete TauEtaPho_;
  TauEtaPho_ = NULL;

  if ((doDelete) && (APt_ != NULL)) delete APt_;
  APt_ = NULL;
  if ((doDelete) && (AEta_ != NULL)) delete AEta_;
  AEta_ = NULL;
  if ((doDelete) && (DiTauDR_ != NULL)) delete DiTauDR_;
  DiTauDR_ = NULL;
  if ((doDelete) && (BEta_ != NULL)) delete BEta_;
  BEta_ = NULL;
  if ((doDelete) && (ABDR_ != NULL)) delete ABDR_;
  ABDR_ = NULL;

  if ((doDelete) && (DiTauDRVsAPt_ != NULL)) delete  DiTauDRVsAPt_;
  DiTauDRVsAPt_ = NULL;
  if ((doDelete) && (DiTauDRVsAEta_ != NULL)) delete DiTauDRVsAEta_;
  DiTauDRVsAEta_ = NULL;
  if ((doDelete) && (ABDRVsAPt_ != NULL)) delete ABDRVsAPt_;
  ABDRVsAPt_ = NULL;
  if ((doDelete) && (ABDRVsDiTauDR_ != NULL)) delete ABDRVsDiTauDR_;
  ABDRVsDiTauDR_ = NULL;
}//void BBAAnalyzer

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void BBAAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(BBAAnalyzer);
